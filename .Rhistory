summary(fit11)
library(car)
kable(vif(fitall))
fit11 <- lm(mpg~am+wt+qsec,mtcars)
summary(fit11)
anova(fit1,fit2,fit3,fit4,fit5,fit6,fit7,fit8,fit9,fit10)
summary(fit2)
fit1 <- lm(mpg~am, data=mtcars)
fit2 <- lm(mpg~am+drat, data=mtcars)
fit3 <- lm(mpg~am+carb+drat+gear, data=mtcars)
fit4 <- lm(mpg~am+carb+drat+gear+vs, data=mtcars)
fit5 <- lm(mpg~am+carb+drat+gear+vs, data=mtcars)
fit6 <- lm(mpg~am+carb+drat+gear+vs+qsec, data=mtcars)
fit7 <- lm(mpg~am+carb+drat+gear+vs+qsec+cyl, data=mtcars)
fit8 <- lm(mpg~am+carb+drat+gear+vs+qsec+cyl+wt, data=mtcars)
fit9 <- lm(mpg~am+carb+drat+gear+vs+qsec+cyl+wt+hp, data=mtcars)
fit10 <- lm(mpg~am+carb+drat+gear+vs+qsec+cyl+wt+hp+disp, data=mtcars)
anova(fit1,fit2,fit3,fit4,fit5,fit6,fit7,fit8,fit9,fit10)
summary(fit1)
summary(fit2)
summary(fit3)
summary(fit4)
summary(fit3)
summary(fitall)
bestmodel <- step(lm(mpg~.,mtcars),trace=0)
summary(bestmodel)
?step
bestmodel <- step(lm(mpg~.,mtcars),trace=1)
bestmodel <- step(lm(mpg~.,mtcars),trace=2)
plot(bestmodel)
test <- lm(mpg~am+cyl+hp+wt)
test <- lm(mpg~am+cyl+hp+wt,mtcars)
summary(test)
require(MASS)
stepAIC(fitall,direction="both",trace=FALSE)
summary(stepAIC(fitall,direction="both",trace=FALSE))
kable(vif(fitall))
bestfit <- step(fitall,trace=0)
summary(bestfit)
summary(bestfit)$coef
summary(bestfit)$r.squared
fit1 <- lm(mpg~cyl, data=mtcars)
fit2 <- lm(mpg~cyl+hp, data=mtcars)
fit3 <- lm(mpg~cyl+hp+wt, data=mtcars)
fit4 <- lm(mpg~cyl+hp+wt+am,data=mtcars)
anova(fit1,fit2,fit3,fit4)
str(mtcars)
fit1 <- lm(mpg~cyl, data=mtcars)
fit2 <- lm(mpg~cyl+hp, data=mtcars)
fit3 <- lm(mpg~cyl+hp+wt, data=mtcars)
fit4 <- lm(mpg~cyl+hp+wt+am,data=mtcars)
fit5 <- lm(mpg~cyl+hp+wt+am+qsec,data=mtcars)
anova(fit1,fit2,fit3,fit4,fit5)
```{r nested modelling , echo=TRUE}
fit1 <- lm(mpg~cyl, data=mtcars)
fit2 <- lm(mpg~cyl+hp, data=mtcars)
fit3 <- lm(mpg~cyl+hp+wt, data=mtcars)
fit4 <- lm(mpg~cyl+hp+wt+am,data=mtcars)
fit5 <- lm(mpg~cyl+hp+wt+am+qsec,data=mtcars)
fit5 <- lm(mpg~cyl+hp+wt+am+qsec+vs,data=mtcars)
anova(fit1,fit2,fit3,fit4,fit5)
vif
kable(vif(fitall))
fit1 <- lm(mpg~cyl, data=mtcars)
fit2 <- lm(mpg~cyl+hp, data=mtcars)
fit3 <- lm(mpg~cyl+hp+wt, data=mtcars)
fit4 <- lm(mpg~cyl+hp+wt+am,data=mtcars)
fit5 <- lm(mpg~cyl+hp+wt+am+qsec,data=mtcars)
fit5 <- lm(mpg~cyl+hp+wt+am+qsec+disp,data=mtcars)
anova(fit1,fit2,fit3,fit4,fit5)
fit1 <- lm(mpg~cyl, data=mtcars)
fit2 <- lm(mpg~cyl+hp, data=mtcars)
fit3 <- lm(mpg~cyl+hp+wt, data=mtcars)
fit4 <- lm(mpg~cyl+hp+wt+am,data=mtcars)
fit5 <- lm(mpg~cyl+hp+wt+am+qsec,data=mtcars)
fit6 <- lm(mpg~cyl+hp+wt+am+qsec+disp,data=mtcars)
anova(fit1,fit2,fit3,fit4,fit5,fit6)
fit1 <- lm(mpg~cyl+hp+wt, data=mtcars)
fit2 <- lm(mpg~cyl+hp+wt+am,data=mtcars)
fit3 <- lm(mpg~cyl+hp+wt+am+qsec,data=mtcars)
fit4 <- lm(mpg~cyl+hp+wt+am+qsec+disp,data=mtcars)
anova(fit1,fit2,fit3,fit4)
fit1 <- lm(mpg~cyl+hp+wt+am,data=mtcars)
fit2 <- lm(mpg~cyl+hp+wt+am+qsec,data=mtcars)
fit3 <- lm(mpg~cyl+hp+wt+am+qsec+disp,data=mtcars)
anova(fit1,fit2,fit3)
cor(fitall)
cor(mtcars)
library(relaimpo)
install.packages("relaimpo")
require(realaimpo)
require(relaimpo)
calc.relimp(bestfit,rela=TRUE)
boot <- boot.relimp(bestfit,b=1000,rank=TRUE,diff=TRUE,rela=TRUE)
booteval.relimp(boot)
plot(booteval.relimp(boot,sort=TRUE))
boot <- boot.relimp(fitall,b=1000,rank=TRUE,diff=TRUE,rela=TRUE)
fitall
bestfit
calc.relimp(fitall,rela=TRUE)
boot <- boot.relimp(fitall,b=1000,rank=TRUE,diff=TRUE,rela=TRUE)
x <- calc.relimp(fitall,rela=TRUE)
boot <- boot.relimp(x,b=100,rank=TRUE,diff=TRUE,rela=TRUE)
boot <- boot.relimp(fit,b=100,rank=TRUE,diff=TRUE,rela=TRUE)
fitall <- lm(mpg~.,mtcars)
boot <- boot.relimp(fitall,b=100,rank=TRUE,diff=TRUE,rela=TRUE)
vif(fitall)
kable(vif(fitall))
test <- lm(mpg~cyl+drat+wt+qsec+vs+am+gear+carb,mtcars)
test
summary(test)
summary(bestfit)
kable(vif(test))
test1 <- lm(mpg~cyl+drat+vs+am+gear+carb,mtcars)
summary(test1)
kable(vif(fitall))
par(mfrow=c(2,2))
plot(summary(bestfit))
plot(bestfit)
plot(mpg~am,mtcars)
scatterplot(mpg~am,mtcars)
?plot
par(mfrow=c(2,2))
>     plot(summary(bestfit))
par(mfrow=c(2,2))
plot(bestfit)
resid(bestfit)
resid(bestfit)/1-hatvalues(bestfit)
sum(resid(bestfit)/1-hatvalues(bestfit))^2
(resid(bestfit)/1-hatvalues(bestfit))
sum(resid(bestfit)/1-hatvalues(bestfit))
sum(resid(bestfit)/1-hatvalues(bestfit))
sum(resid(bestfit)/1-hatvalues(bestfit))^2
summary(bestfit)$r.squared
kable(tab,align="c")
par(mfrow=c(2,2))
plot(bestfit)
install.packages("pdfetch")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
?createDataPartition
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(inTrain)
training
str(training)
str(testing)
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer))
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
x = training[diagnosis==IL*,]
x = training[diagnosis==IL,]
summary(training)
str(training)
x <- training[grep("IL",training$diagnosis)]
str(x)
x <- training[grep("IL*",training$diagnosis)]
x <- training[grep("IL*",training$diagnosis)]
x <- subset(training,diagnosis("IL*"))
x <- subset(training,pattern==diagnosis("IL*"))
x <- subset(training,x==diagnosis("IL*"))
x <- subset(training,x==training$diagnosis("IL*"))
x <- subset(training,grepl(glob2rx("IL*"))
)
x <- subset(training,grepl("IL*",training$diagnosis))
str(x)
x <- subset(training,grepl("^IL*",training$diagnosis))
str(x)
require(data.table); x <- as.data.table(training)
x1 <- x["IL*" %in% diagnosis]
str(x1)
subset?
?subset
x <- subset(training,diagnosis=="IL*")
str(x)
str(training)
x <- training[diagnosis[,57:68]]
x <- training[diagnosis[57:68,]]
x <- subset(training, diagnosis[57:68,])
x <- subset(training, diagnosis[57:68])
x <- subset(training, diagnosis[,57:68])
x <- training[,57:68]
str(x)
x <- training[,58:69]
x
str(x)
str(training)
str(x)))
str(x)
prComp <- prcomp(log10(x))
prComp <- prcomp(x)
prComp
summary(prComp)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
st(training)
str(training)
str(x)
str(adData)
x <- adData[58:69,]
str(x)
x <- adData[,58:69]
str(x)
inTrain = createDataPartition(x$diagnosis,p=3/4[[1]])
str(x)
head(x)
str(training)
inTrain = createDataPartition(x$diagnosis,p=3/4[[1]]
)
inTrain = createDataPartition(x,p=3/4[[1]]
)
str(x)
inTrain = createDataPartition(x,p=3/4)
str(adData)
x$diagnosis <- adData$diagnosis
str(x)
inTrain = createDataPartition(x$diagnosis,p=3/4[[1]])
str(inTrain)
training = x[ inTrain,]
training = x[inTrain,]
str(inTrain)
training = x[ inTrain, ]
str(adData)
str(inTrain)
inTrain = createDataPartition(x$diagnosis,p=3/4[[1]])
str(x)
inTrain = createDataPartition(x$diagnosis,p=3/4[[13]])
inTrain = createDataPartition(x$diagnosis,p=3/4[[12]])
inTrain = createDataPartition(x$diagnosis,p=3/4[[1]])
train = x[inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
adData = adData[58:69]
str(adData)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
adData1 = adData[58:69]
adData1$diagnosis = adData$diagnosis
str(adData1)
inTrain = createDataPartition(adData1$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
testing
fit1 <- glm(diagnosis~.,training)
?glm
fit1 <- train(diagnosis~.,adData1,method="glm")
install.packages("e1071")
require(e1071)
fit1 <- train(diagnosis~.,adData1,method="glm")
prComp <- prcomp(adData1)
prComp <- prcomp(training)
prComp <- prcomp(training,na.rm=TRUE)
fit2 <- train(diagnosis~.,"glm",preProcess="pca",data=training)
summary(fit)
str(training)
summary(fit)
require(AppliedPredictiveModeling)
require(caret)
?createDataPartition
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(inTrain$SuperPlasticizer)
str(inTrain)
hist(inTrain)
str(concrete)
hist(concrete$Superplasticizer)
log(concrete$Superplasticizer)
hist(log(concrete$Superplasticizer))
summary(concrete$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?preProcess
x <- preProcess()
x <- training[58:69]
str(x)
x$diagnosis <- training$diagnosis
str(x)
fit <- preProcess(x[1:12],method="pca",)
fit
summary(fit)
x <- training[58:69]
fit <- preProcess(x[1:12],method="pca")
fit
summary(fit)
str(fit)
x
str(x)
fit <- preProcess(x,method="pca")
fit
preProcess(x,method="pca")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
x <- training[,grepl("PartString\\IL\\"), names(training))]
x <- training[,grepl("PartString\\(IL)\\"), names(training))]
x <- training[,grepl("PartString\\(IL)\\"), names(training))]
names(trianing)
names(training)
tr <- training[58:69]
str(tr)
preProcess(tr,method="pca")
preProcess(log(tr),method="pca")
preProcess(log10(tr),method="pca")
preProcess(tr,method="pca")
procomp(x)
procomp(tr)
prcomp(tr)
summary(prcomp(tr))
summary(prcomp(log10(tr)))
summary(prcomp((tr)))
require(caret)
preProcess(tr,method="pca")
summary(preProcess(tr,method="pca"))
str(preProcess(tr,method="pca"))
summary(preProcess(tr,method="pca", thres=0.95))
preProcess(tr,method="pca", thres=0.8)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(training)
hist(training$Superplasticizer)
featurePlot(training)
featurePlot(training[,c("CompressiveStrength","Water","CoarseAggreagte","Superplasticizer")],y=training$Cement)
featurePlot(training[,c("CompressiveStrength","Water","CoarseAggreagte","Superplasticizer")],y=training$Cement,plot="pairs")
log10(training$Superplasticizer)
hist(log10(training$Superplasticizer))
hist(log(training$Superplasticizer))
hist(training$Superplasticizer)
plot(log10)
plot(log)
hist(log(training$Superplasticizer)+1)
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
str(adData)
adData1 <- adData[58:69]
adData1$diagnosis = adData$diagnosis
inTrain1 = createDataPartition(adData1$diagnosis,p=3/4)[[1]]
train = adData[ inTrain1,]
str(train)
inTrain1 = createDataPartition(adData1$diagnosis,p=3/4)[[1]]
str(inTrain)
summary(inTrain)
train = adData1[ inTrain1,]
str(train)
fit1 <- train(diagnosis~.,train,method="glm")
str(fit1)
ffit
fit1
fit2 <- train(diagnosis~.,train,method="pca")
?train
fit2 <- train(diagnosis~.,train,method="glm",preProcess="pca")
fit2
fit1
pinccomp(fit1)
prcomp(fit1)
summary(fit1)
fit2 <- train(diagnosis~.,train,method="glm",preProcess="pca",maxit=80)
fit2
fit1 <- train(diagnosis~.,train,method="glm", maxit=80)
fit1
fit1 <- train(diagnosis~.,train,method="glm", maxit=80)
fit1_1 <- confusionMatrix(train(,13], predict(fit1,train[,-13]))
fit1_1 <- confusionMatrix(train[],13], predict(fit1,train[,-13]))
fit1_1 <- confusionMatrix(train[,13], predict(fit1,train[,-13]))
fit1_1
?predict
fit1
fit1_1
fit1 <- train(diagnosis~.,train,method="glm")
fit1
fit2 <- train(diagnosis~.,train,method="glm",preProcess="pca",trControl=trainControl((preProcOptions=list(thresh=0.8)))
)
fit2 <- train(diagnosis~.,train,method="glm",preProcess="pca",trControl=trainControl((preProcOptions=list(thresh=0.8)))
C2 <- confusionMatrix(train$diagnosis,predict(modelFit,train))
set.seed(3433)
IL <- grep("^IL", colnames(training), value=TRUE)
ILpredictors <- predictors[, IL]
dataframe <- data.frame(diagnosis, ILpredictors)
inTrain <- createDataPartition(dataframe$diagnosis, p=3/4)[[1]]
training <- df[inTrain, ]
testing <- df[-inTrain, ]
modelFit <- train(diagnosis ~ ., method="glm", data=training)
predictions <- predict(modelFit, newdata=testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
NONPCA <- C1$overall[1]
NONPCA # Non-PCA Accuracy: 0.65
modelFit <- train(training$diagnosis ~ ., method="glm", preProcess="pca", data=training,
trControl=trainControl(preProcOptions=list(thresh=0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
PCA <- C2$overall[1]
PCA # PCA Accuracy: 0.72
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
IL <- grep("^IL", colnames(training), value=TRUE)
ILpredictors <- predictors[, IL]
dataframe <- data.frame(diagnosis, ILpredictors)
inTrain <- createDataPartition(dataframe$diagnosis, p=3/4)[[1]]
training <- df[inTrain, ]
testing <- df[-inTrain, ]
modelFit <- train(diagnosis ~ ., method="glm", data=training)
predictions <- predict(modelFit, newdata=testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
modelFit <- train(diagnosis ~ ., method="glm", data=training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(IL, method='pca', thresh=0.9,
outcome=training$diagnosis)
preProc$rotation # 9 components
IL <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(IL, method='pca', thresh=0.9,
outcome=training$diagnosis)
sumamry(preProc)
IL <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(IL, method='pca', thresh=0.9,
outcome=training$diagnosis)
summary(preProc)
preProc
citation())
citation()
citation(sensitivity)
citation(package = "sensitivity")
setwd("C:/Users/Tamara/work/Coursera/SPECIALISATION_DataScience/machine_learning/MachineLearning")
install.packages("knitr")
testing
Sys.getlocale()
Sys.setlocale(category = "LC_ALL", locale = "English_United States.1252")
Sys.getlocale()
